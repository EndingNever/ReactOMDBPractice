{"version":3,"sources":["hooks/useFetch.js","components/MovieCard.js","components/MovieList.js","utility.js","contexts/PageContext.js","components/MovieSearch.js","components/Paginator.js","App.js","reportWebVitals.js","index.js"],"names":["useFetch","MovieCard","poster","title","type","className","src","alt","MovieList","videos","length","map","video","Poster","Title","Type","imdbID","baseURL","getMoviesBySearchTerm","searchTerm","page","a","searchTermURL","fetch","response","json","data","console","log","Response","Search","totalResults","pageContext","createContext","styled","button","props","primary","css","secondary","div","MovieSearch","updateVideos","updateTotal","useContext","currentPage","movieText","setMovieText","movieType","setMovieType","onSubmit","e","preventDefault","then","total","finally","placeholder","onChange","target","value","Paginator","App","useState","setVideos","setTotalVideos","setCurrentPage","path","component","Provider","updatePage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a32dfb4a.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nfunction useFetch(url) {\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [data, setData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetch(url)\r\n            .then((response) => response.json())\r\n            .then((json) => setData(json))\r\n            .finally(() => {\r\n                console.log(data);\r\n                setLoading(false)\r\n            })\r\n    }, []);\r\n\r\n\r\n    return [loading, data];\r\n}\r\n\r\nexport default useFetch;","import React from 'react'\r\n\r\nfunction MovieCard( { poster, title, type } ) {\r\n    return (\r\n        <div className=\"movie-card\">\r\n            <img className=\"movie-card__poster\" \r\n            src={poster} \r\n            alt={title} \r\n        />\r\n            <div className=\"movie-card__title\">\r\n                {title}\r\n            </div>\r\n            <div className=\"movie-card__type\">  \r\n                {type}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieCard\r\n","import React from 'react'\r\nimport MovieCard from './MovieCard'\r\n\r\nfunction MovieList({ videos }) {\r\n\r\n\r\n\r\n    if (videos.length === 0) {\r\n        return (<div className=\"no_movies_alert\">Movies Display Here!</div>)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Movie List</h1>\r\n            <div className=\"flex\">\r\n            {videos.map((video) => (\r\n          <MovieCard\r\n            key={video.imdbID}\r\n            poster={video.Poster}\r\n            title={video.Title}\r\n            type={video.Type}\r\n          />\r\n        ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MovieList\r\n","// Write an arrow function called getMoviesBySearchTerm that takes a search string as input and uses fetch and async/await to get an array of movies with a matching title from OMDb API.\r\n\r\n// API Key http://www.omdbapi.com/?i=tt3896198&apikey=e54dfc28\r\n\r\n\r\nconst OMDB_API_KEY = \"e54dfc28\";\r\nconst baseURL = `https://www.omdbapi.com/?apikey=${OMDB_API_KEY}&`;\r\n\r\nconst getMoviesBySearchTerm = async (searchTerm, type, page) => {\r\n    let searchTermURL = `${baseURL}s=${searchTerm}&page=${page}`;\r\n    if(type) {\r\n        searchTermURL += `&type=${type}`\r\n    }\r\n\r\n    const response = await fetch(searchTermURL)\r\n    const data = await response.json();\r\n    console.log(searchTermURL) \r\n\r\n    if(data.Response === \"True\") {\r\n        return [data.Search, data.totalResults];\r\n    }\r\n    return [];\r\n};\r\n\r\n// Waiting for a response from the server, because we need an async/await\r\n// getMoviesBySearchTerm(\"Batman\").then((movies) => {\r\n//     console.log('Movies Found', movies)\r\n// }).catch((err) => {\r\n//     console.error(\"whoops no movies\")\r\n// });\r\n\r\n// Write another arrow function called getMovieDetailsById that takes a valid OMDb movie id as input and uses fetch and async/await to get an object of detailed information about the specified movie.\r\n\r\n   const getMovieDetailsById = async (movieId) => {\r\n    \r\n    const movieIdURL = `${baseURL}i=${movieId}`;\r\n    const response = await fetch(movieIdURL)\r\n    const data = await response.json();\r\n\r\n    // console.log(data);\r\n\r\n    if(data.Response === \"False\") { \r\n        throw new Error();\r\n    }\r\n\r\n    return data\r\n};\r\n\r\n// console.log(getMovieDetailsById(\"tt0372784\"))\r\n\r\nexport { getMovieDetailsById }\r\nexport { getMoviesBySearchTerm }\r\n// getMovieDetailsById(\"tt0372784\");\r\n \r\n","import { createContext } from \"react\";\r\n\r\nconst pageContext = createContext(1)\r\n\r\nexport default pageContext","import React from 'react'\r\n\r\nimport styled, { css } from 'styled-components'\r\n\r\nimport { useState } from 'react';\r\nimport { getMoviesBySearchTerm } from \"../utility\"\r\nimport { useContext } from 'react/cjs/react.development';\r\nimport pageContext from '../contexts/PageContext';\r\n\r\nconst Button = styled.button`\r\n    background-color: green;\r\n    color: white;\r\n    font-weight: bold;\r\n    border: 2px solid black;\r\n    height:100px;\r\n    border-radius: 10px;\r\n\r\n    ${props =>\r\n        props.primary &&\r\n        css`\r\n          background: tomato;\r\n          color: white;\r\n          border: 2px solid tomato;\r\n        `};\r\n    ${props =>\r\n        props.secondary &&\r\n        css`\r\n          background: #ccc;\r\n          color: palevioletred;\r\n        `};\r\n\r\n`\r\nconst Container = styled.div`\r\n    border: 2px dashed black;\r\n    background-color: gold;\r\n`\r\n\r\nfunction MovieSearch({ updateVideos, updateTotal }) {\r\n\r\n     const { currentPage, movieText, setMovieText, movieType, setMovieType } = useContext(pageContext)\r\n\r\n     const fetchMovies = ()=>{\r\n         getMoviesBySearchTerm(movieText, movieType, currentPage).then((data)=>{\r\n             const [videos, total] = data;\r\n             updateVideos(videos);\r\n             updateTotal(total);\r\n         }).finally()\r\n     }\r\n\r\n    //  const fetchMovies = () => {\r\n    //     getMoviesBySearchTerm(movieText, movieType, currentPage)\r\n    //         .then((data) => {\r\n    //             const [videos, total] = data;\r\n    //             updateVideos(videos);\r\n    //             updateTotal(total);\r\n    //         })\r\n    //         .finally(() => {\r\n    //             // updatePage(currentPage)\r\n    //         });\r\n    // }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        fetchMovies();\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"movie__search-container\">\r\n            <form\r\n                onSubmit={handleSubmit}\r\n            >\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter Movie...\"\r\n                    onChange={(e) => {\r\n                        setMovieText(e.target.value)\r\n                    }}\r\n                    value={movieText}\r\n                    className=\"searchInput\"\r\n                />\r\n                <select\r\n                    className=\"movie__search-select\"\r\n                    onChange={(e) => {\r\n                        setMovieType(e.target.value)\r\n                    }}\r\n                    value={movieType}\r\n                >\r\n                    <option value=\"\">All</option>\r\n                    <option value=\"movie\">Movie</option>\r\n                    <option value=\"series\">Series</option>\r\n\r\n                </select>\r\n                <button type=\"submit\" className=\"button\">Enter</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default MovieSearch\r\n\r\n\r\n\r\nexport const testExport2 = ()=>{\r\n    console.log('testexport2');\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useContext } from 'react/cjs/react.development';\r\nimport pageContext from '../contexts/PageContext';\r\nimport \"../styles/Paginator.css\"\r\nimport { getMoviesBySearchTerm } from '../utility';\r\n\r\nconst calculateTotalPages = (itemCount) => {\r\n    return Math.ceil(itemCount / 10)\r\n};\r\n\r\nfunction Paginator({ totalVideos }) {\r\n    const { currentPage, setCurrentPage } = useContext(pageContext)\r\n\r\n    const totalPages = Math.ceil(totalVideos / 10)\r\n    \r\n    return (\r\n        <div>\r\n            <p>Page {currentPage} of {calculateTotalPages(totalVideos)}</p>\r\n            <div>\r\n                <button\r\n                disabled={currentPage == 1}\r\n                    onClick={() => {\r\n                        if (currentPage > 1) {\r\n                            setCurrentPage(currentPage-1);\r\n                        }\r\n                        \r\n                    }}\r\n                >\r\n                    &laquo;\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        setCurrentPage(currentPage+1);\r\n                    }}\r\n                >\r\n                    &raquo;</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator\r\n","import './App.css';\nimport { useState, useEffect } from \"react\";\n\nimport { useFetch, useAdd } from './hooks'\n\nimport MovieList from './components/MovieList';\nimport MovieSearch from './components/MovieSearch';\nimport Paginator from './components/Paginator'\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { Routes, Switch } from \"react-router\"\nimport pageContext from './contexts/PageContext';\nimport { useContext } from 'react';\nimport { getMoviesBySearchTerm } from './utility';\nimport { fetchMovies } from './components/MovieSearch'\n\nfunction App() {\n  const [videos, setVideos] = useState([]);\n  const [totalVideos, setTotalVideos] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [movieText, setMovieText] = useState('')\n  const [movieType, setMovieType] = useState('')\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n\n  }\n\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/Home\" component={<App />} />\n      </Routes>\n      <pageContext.Provider value={{ currentPage, setCurrentPage, movieText, setMovieText, movieType, setMovieType  }}>\n        <div className=\"App\">\n          <h1 className=\"nav\" > OMDB </h1>\n          {/* {totalVideos > 0 ? <Paginator\n            totalVideos={totalVideos}\n            currentPage={currentPage}\n          /> : <></>} */}\n          <MovieSearch\n            updateVideos={(videos) => {\n              setVideos(videos)\n            }}\n            updateTotal={(total) => {\n              setTotalVideos(total);\n            }}\n            updatePage={(page) => {\n              setCurrentPage(page)\n            }}\n          />\n          {videos && <MovieList videos={videos} />}\n        </div>\n      </pageContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}