{"version":3,"sources":["components/MovieCard.js","components/MovieList.js","utility.js","components/MovieSearch.js","components/Paginator.js","App.js","reportWebVitals.js","index.js"],"names":["MovieCard","poster","title","type","className","src","alt","MovieList","videos","length","map","video","Poster","Title","Type","imdbID","baseURL","getMoviesBySearchTerm","searchTerm","a","searchTermURL","fetch","response","json","data","Response","Search","totalResults","styled","button","props","primary","css","secondary","div","MovieSearch","updateVideos","updateTotal","useState","movieText","setMovieText","movieType","setMovieType","onSubmit","e","preventDefault","then","total","finally","placeholder","onChange","target","value","Paginator","itemCount","totalVideos","page","setPage","Math","ceil","disabled","onClick","console","log","App","setTotalVideos","setVideos","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6dcb2033.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction MovieCard( { poster, title, type } ) {\r\n    return (\r\n        <div className=\"movie-card\">\r\n            <img className=\"movie-card__poster\" \r\n            src={poster} \r\n            alt={title} \r\n        />\r\n            <div className=\"movie-card__title\">\r\n                {title}\r\n            </div>\r\n            <div className=\"movie-card__type\">  \r\n                {type}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieCard\r\n","import React from 'react'\r\nimport MovieCard from './MovieCard'\r\n\r\nfunction MovieList({ videos }) {\r\n\r\n\r\n\r\n    if (videos.length === 0) {\r\n        return (<div>No Movies</div>)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Movie List</h1>\r\n            <div className=\"flex\">\r\n            {videos.map((video) => (\r\n          <MovieCard\r\n            key={video.imdbID}\r\n            poster={video.Poster}\r\n            title={video.Title}\r\n            type={video.Type}\r\n          />\r\n        ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MovieList\r\n","// Write an arrow function called getMoviesBySearchTerm that takes a search string as input and uses fetch and async/await to get an array of movies with a matching title from OMDb API.\r\n\r\n// API Key http://www.omdbapi.com/?i=tt3896198&apikey=e54dfc28\r\n\r\n\r\nconst OMDB_API_KEY = \"e54dfc28\";\r\nconst baseURL = `https://www.omdbapi.com/?apikey=${OMDB_API_KEY}&`;\r\n\r\n\r\nconst getMoviesBySearchTerm = async (searchTerm, type) => {\r\n    let searchTermURL = `${baseURL}s=${searchTerm}`;\r\n    if(type) {\r\n        searchTermURL += `&type=${type}`\r\n    }\r\n\r\n    const response = await fetch(searchTermURL)\r\n    const data = await response.json();\r\n\r\n    if(data.Response === \"True\") {\r\n        return [data.Search, data.totalResults];\r\n    }\r\n    \r\n    return [];\r\n};\r\n\r\n// Waiting for a response from the server, because we need an async/await\r\n// getMoviesBySearchTerm(\"Batman\").then((movies) => {\r\n//     console.log('Movies Found', movies)\r\n// }).catch((err) => {\r\n//     console.error(\"whoops no movies\")\r\n// });\r\n\r\n// Write another arrow function called getMovieDetailsById that takes a valid OMDb movie id as input and uses fetch and async/await to get an object of detailed information about the specified movie.\r\n\r\n   const getMovieDetailsById = async (movieId) => {\r\n    \r\n    const movieIdURL = `${baseURL}i=${movieId}`;\r\n    const response = await fetch(movieIdURL)\r\n    const data = await response.json();\r\n\r\n    // console.log(data);\r\n\r\n    if(data.Response === \"False\") { \r\n        throw new Error();\r\n    }\r\n\r\n    return data\r\n};\r\n\r\n// console.log(getMovieDetailsById(\"tt0372784\"))\r\n\r\nexport { getMovieDetailsById }\r\nexport { getMoviesBySearchTerm }\r\n// getMovieDetailsById(\"tt0372784\");\r\n \r\n","import React from 'react'\r\n\r\nimport styled, { css } from 'styled-components'\r\n\r\nimport { useState } from 'react';\r\nimport { getMoviesBySearchTerm } from \"../utility\"\r\n\r\nconst Button = styled.button`\r\n    background-color: green;\r\n    color: white;\r\n    font-weight: bold;\r\n    border: 2px solid black;\r\n    height:100px;\r\n    border-radius: 10px;\r\n\r\n    ${props =>\r\n        props.primary &&\r\n        css`\r\n          background: tomato;\r\n          color: white;\r\n          border: 2px solid tomato;\r\n        `};\r\n    ${props =>\r\n        props.secondary &&\r\n        css`\r\n          background: #ccc;\r\n          color: palevioletred;\r\n        `};\r\n\r\n`\r\nconst Container = styled.div`\r\n    border: 2px dashed black;\r\n    background-color: gold;\r\n`\r\n\r\nfunction MovieSearch({ updateVideos, updateTotal }) {\r\n\r\n    const [movieText, setMovieText] = useState('')\r\n    const [movieType, setMovieType] = useState('')\r\n\r\n    // useEffect(() => {\r\n    //     getMoviesBySearchTerm(movieText, movieType)\r\n    //         .then((data) => {\r\n    //             updateVideos(data);\r\n    //         })\r\n    //         .finally(() => {\r\n    //             // setIsLoading(false);\r\n    //         });\r\n    // }, [movieText, movieType]);\r\n\r\n    const fetchMovies = () => {\r\n        getMoviesBySearchTerm(movieText, movieType)\r\n            .then((data) => {\r\n                const [videos, total] = data;\r\n\r\n                updateVideos(videos)\r\n                updateTotal(total)\r\n            })\r\n            .finally(() => {\r\n                // setIsLoading(false);\r\n            });\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        fetchMovies();\r\n    }\r\n\r\n\r\n    return (\r\n    <div className=\"movie__search-container\">\r\n        <form\r\n            onSubmit={handleSubmit}\r\n            >\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Enter Movie...\"\r\n                onChange={(e) => {\r\n                    setMovieText(e.target.value)\r\n                }}\r\n                value={movieText}\r\n                className=\"searchInput\"\r\n            />\r\n            <select \r\n                className=\"movie__search-select\"\r\n                // style={{ \r\n                //     border: \"2px solid red\", \r\n                //     backgroundColor:\"#ccc\", \r\n                //     fontSize: \"40px\",\r\n                //     margin: \"0 10px\",\r\n                //     borderRadius: \"10px\"\r\n                // }}\r\n                onChange={(e) => {\r\n                    setMovieType(e.target.value)\r\n                }}\r\n                value={movieType}\r\n            >\r\n                <option value=\"\">Type</option>\r\n                <option value=\"movie\">Movie</option>\r\n                <option value=\"series\">Series</option>\r\n                {/* <option value=\"episode\">Episode</option> */}\r\n            </select>\r\n            <button type=\"submit\">Enter</button>\r\n\r\n            {/* <Container>\r\n                <Button>Hello world!</Button>\r\n                <Button primary>Hello world!</Button>\r\n                <Button secondary>Hello world!</Button>\r\n            </Container> */}\r\n        </form>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default MovieSearch\r\n","import React, { useState } from 'react'\r\nimport \"../styles/Paginator.css\"\r\n\r\nconst calculateTotalPages = (itemCount) => {\r\n    return Math.ceil(itemCount / 10)\r\n};\r\n\r\nfunction Paginator({ totalVideos }) {\r\n    const [page, setPage] = useState(1);\r\n    \r\n    const totalPages = Math.ceil(totalVideos / 10)\r\n    \r\n    return (\r\n        <div>\r\n            <p>Page {page} of {calculateTotalPages(totalVideos)}</p>\r\n            <div>\r\n                <button\r\n                disabled={page == 1}\r\n                    onClick={() => {\r\n                        if (page > 1) {\r\n                            setPage(page-1);\r\n                        }\r\n                        console.log(\"clicked prev\")\r\n                    }}\r\n                >\r\n                    &laquo;\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        setPage(page+1);\r\n                    }}\r\n                >\r\n                    &raquo;</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator\r\n","import './App.css';\nimport { useState, useRef } from \"react\";\n\nimport MovieList from './components/MovieList';\nimport MovieSearch from './components/MovieSearch';\nimport Paginator from './components/Paginator'\n\nfunction App() {\n\n  const [totalVideos, setTotalVideos] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n\n\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n\n  }\n\n  const [videos, setVideos] = useState([]);\n  \n\n  return (\n    \n    <div className=\"App\">\n      <h1>My App </h1>\n\n      <MovieSearch \n        updateVideos={(videos)=> {\n          setVideos(videos)\n        }}\n        updateTotal={(total)=> {\n          setTotalVideos(total);\n        }}\n      />\n\n        {videos && <MovieList videos={videos}/>}\n\n      <Paginator \n        totalVideos={totalVideos}\n      />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}